import streamlit as st
import cv2
import mediapipe as mp
import numpy as np
from PIL import Image, ImageDraw
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MediaPipe
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
face_mesh = mp_face_mesh.FaceMesh(
    static_image_mode=True,
    max_num_faces=1,
    refine_landmarks=True,
    min_detection_confidence=0.5
)

def detect_face_landmarks(image):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –ª–∏—Ü–∞"""
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(image_rgb)
    
    if results.multi_face_landmarks:
        landmarks = results.multi_face_landmarks[0]
        return landmarks
    return None

def get_eye_coordinates(landmarks, image_shape):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–ª–∞–∑ –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏"""
    h, w = image_shape[:2]
    
    # –ò–Ω–¥–µ–∫—Å—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –≥–ª–∞–∑
    left_eye_indices = [33, 133]  # –í–Ω–µ—à–Ω–∏–µ —É–≥–ª—ã –ª–µ–≤–æ–≥–æ –≥–ª–∞–∑–∞
    right_eye_indices = [362, 263]  # –í–Ω–µ—à–Ω–∏–µ —É–≥–ª—ã –ø—Ä–∞–≤–æ–≥–æ –≥–ª–∞–∑–∞
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–ª–∞–∑
    left_eye = [(int(landmarks.landmark[i].x * w), int(landmarks.landmark[i].y * h)) 
                for i in left_eye_indices]
    right_eye = [(int(landmarks.landmark[i].x * w), int(landmarks.landmark[i].y * h)) 
                 for i in right_eye_indices]
    
    # –¶–µ–Ω—Ç—Ä—ã –≥–ª–∞–∑
    left_center = (int(np.mean([p[0] for p in left_eye])), 
                   int(np.mean([p[1] for p in left_eye])))
    right_center = (int(np.mean([p[0] for p in right_eye])), 
                    int(np.mean([p[1] for p in right_eye])))
    
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥–ª–∞–∑–∞–º–∏
    eye_distance = np.sqrt((right_center[0] - left_center[0])**2 + 
                          (right_center[1] - left_center[1])**2)
    
    # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
    angle = np.arctan2(right_center[1] - left_center[1], 
                      right_center[0] - left_center[0])
    
    return left_center, right_center, eye_distance, angle

def resize_and_rotate_glasses(glasses_img, eye_distance, angle, scale_factor=1.2):
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –æ—á–∫–∏"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PIL –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    glasses_pil = Image.fromarray(cv2.cvtColor(glasses_img, cv2.COLOR_BGR2RGBA))
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    glasses_width = int(eye_distance * scale_factor)
    aspect_ratio = glasses_pil.height / glasses_pil.width
    glasses_height = int(glasses_width * aspect_ratio)
    
    glasses_resized = glasses_pil.resize((glasses_width, glasses_height), Image.Resampling.LANCZOS)
    
    # –ü–æ–≤–æ—Ä–æ—Ç
    angle_degrees = np.degrees(angle)
    glasses_rotated = glasses_resized.rotate(angle_degrees, expand=True)
    
    return glasses_rotated

def overlay_glasses(face_img, glasses_img, left_center, right_center, eye_distance, angle):
    """–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –æ—á–∫–∏ –Ω–∞ –ª–∏—Ü–æ"""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞
    result = face_img.copy()
    
    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—á–∫–∏
    glasses_processed = resize_and_rotate_glasses(glasses_img, eye_distance, angle)
    
    # –¶–µ–Ω—Ç—Ä –º–µ–∂–¥—É –≥–ª–∞–∑–∞–º–∏
    center_x = int((left_center[0] + right_center[0]) / 2)
    center_y = int((left_center[1] + right_center[1]) / 2)
    
    # –°–º–µ—â–µ–Ω–∏–µ –ø–æ Y –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    y_offset = -int(glasses_processed.height * 0.1)
    
    # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
    x_pos = center_x - glasses_processed.width // 2
    y_pos = center_y - glasses_processed.height // 2 + y_offset
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
    glasses_cv = cv2.cvtColor(np.array(glasses_processed), cv2.COLOR_RGBA2BGRA)
    
    # –ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    for i in range(glasses_cv.shape[0]):
        for j in range(glasses_cv.shape[1]):
            y_coord = y_pos + i
            x_coord = x_pos + j
            
            if (0 <= y_coord < result.shape[0] and 0 <= x_coord < result.shape[1]):
                alpha = glasses_cv[i, j, 3] / 255.0
                if alpha > 0:
                    for c in range(3):
                        result[y_coord, x_coord, c] = (
                            alpha * glasses_cv[i, j, c] + 
                            (1 - alpha) * result[y_coord, x_coord, c]
                        )
    
    return result

def create_demo_glasses():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—á–∫–∏"""
    glasses = np.zeros((100, 200, 4), dtype=np.uint8)
    
    # –†–∏—Å—É–µ–º –ª–∏–Ω–∑—ã
    cv2.circle(glasses, (50, 50), 30, (0, 0, 0, 200), 3)
    cv2.circle(glasses, (150, 50), 30, (0, 0, 0, 200), 3)
    
    # –ü–µ—Ä–µ–Ω–æ—Å–∏—Ü–∞
    cv2.line(glasses, (80, 45), (120, 45), (0, 0, 0, 200), 3)
    
    # –î—É–∂–∫–∏
    cv2.line(glasses, (20, 50), (5, 40), (0, 0, 0, 200), 3)
    cv2.line(glasses, (180, 50), (195, 40), (0, 0, 0, 200), 3)
    
    return glasses

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üï∂Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –æ—á–∫–æ–≤")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏!")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
col1, col2 = st.columns(2)

with col1:
    st.subheader("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞")
    face_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞", 
                                type=['jpg', 'jpeg', 'png'], 
                                key='face')

with col2:
    st.subheader("üï∂Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—á–∫–∏")
    glasses_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤ (PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)", 
                                   type=['png'], 
                                   key='glasses')
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–º–æ –æ—á–∫–æ–≤
    use_demo_glasses = st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ –æ—á–∫–∏")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
scale_factor = st.sidebar.slider("–ú–∞—Å—à—Ç–∞–± –æ—á–∫–æ–≤", 0.8, 2.0, 1.2, 0.1)
y_offset = st.sidebar.slider("–°–º–µ—â–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏", -50, 50, 0, 5)

if face_file is not None:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
    face_bytes = face_file.read()
    face_image = Image.open(io.BytesIO(face_bytes))
    face_cv = cv2.cvtColor(np.array(face_image), cv2.COLOR_RGB2BGR)
    
    st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    st.image(face_image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ", width=300)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –ª–∏—Ü–∞
    landmarks = detect_face_landmarks(face_cv)
    
    if landmarks:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–ª–∞–∑
        left_center, right_center, eye_distance, angle = get_eye_coordinates(landmarks, face_cv.shape)
        
        st.success("‚úÖ –õ–∏—Ü–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞–π–¥–µ–Ω—ã.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≥–ª–∞–∑
        face_with_points = face_cv.copy()
        cv2.circle(face_with_points, left_center, 5, (0, 255, 0), -1)
        cv2.circle(face_with_points, right_center, 5, (0, 255, 0), -1)
        cv2.line(face_with_points, left_center, right_center, (255, 0, 0), 2)
        
        st.subheader("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≥–ª–∞–∑")
        st.image(cv2.cvtColor(face_with_points, cv2.COLOR_BGR2RGB), 
                caption="–ó–µ–ª–µ–Ω—ã–µ —Ç–æ—á–∫–∏ - —Ü–µ–Ω—Ç—Ä—ã –≥–ª–∞–∑", width=300)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∫–æ–≤
        glasses_cv = None
        
        if glasses_file is not None:
            glasses_bytes = glasses_file.read()
            glasses_image = Image.open(io.BytesIO(glasses_bytes))
            glasses_cv = cv2.cvtColor(np.array(glasses_image), cv2.COLOR_RGBA2BGRA)
            st.subheader("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—á–∫–∏")
            st.image(glasses_image, caption="–û—á–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏", width=200)
            
        elif use_demo_glasses:
            glasses_cv = create_demo_glasses()
            st.subheader("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—á–∫–∏")
            st.image(cv2.cvtColor(glasses_cv, cv2.COLOR_BGRA2RGBA), 
                    caption="–î–µ–º–æ –æ—á–∫–∏", width=200)
        
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞
        if glasses_cv is not None:
            try:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∫–∏
                result = overlay_glasses(face_cv, glasses_cv, left_center, right_center, 
                                       eye_distance, angle)
                
                st.subheader("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏")
                result_rgb = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)
                st.image(result_rgb, caption="–í—ã –≤ –æ—á–∫–∞—Ö!", width=400)
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                result_pil = Image.fromarray(result_rgb)
                buf = io.BytesIO()
                result_pil.save(buf, format='PNG')
                buf.seek(0)
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    data=buf.getvalue(),
                    file_name="virtual_tryout.png",
                    mime="image/png"
                )
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–∏ –æ—á–∫–æ–≤: {str(e)}")
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ –æ—á–∫–∏")
            
    else:
        st.error("‚ùå –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        st.info("–°–æ–≤–µ—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º")

else:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    st.subheader("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    st.write("""
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞** - –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∞–Ω—Ñ–∞—Å —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
    2. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—á–∫–∏** - PNG —Ñ–∞–π–ª —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    3. **–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –≥–ª–∞–∑–∞ –∏ –Ω–∞–ª–æ–∂–∏—Ç –æ—á–∫–∏
    
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
    - –õ–∏—Ü–æ: JPG, JPEG, PNG
    - –û—á–∫–∏: PNG (—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
    """)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏"):
    st.write("""
    **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
    - **MediaPipe** - –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–µ–≤—ã—Ö —Ç–æ—á–µ–∫
    - **OpenCV** - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - **Streamlit** - –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    
    **–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:**
    1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ 468 –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫ –ª–∏—Ü–∞
    2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –≥–ª–∞–∑
    3. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã
    4. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–≤–æ—Ä–æ—Ç –æ—á–∫–æ–≤
    5. –ù–∞–ª–æ–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    """)

# –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
with st.expander("üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"):
    st.write("""
    **–î–ª—è —Ñ–æ—Ç–æ –ª–∏—Ü–∞:**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω—Ñ–∞—Å
    - –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–Ω–µ–π –Ω–∞ –ª–∏—Ü–µ
    - –ì–ª–∞–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –∏ –≤–∏–¥–Ω—ã
    - –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∏–ª—å–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤ –≥–æ–ª–æ–≤—ã
    
    **–î–ª—è –æ—á–∫–æ–≤:**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    - –û—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä—è–º–æ
    - –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –±–æ–ª–µ–µ 10MB
    """)